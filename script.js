let entries = [];
let savedResults = JSON.parse(localStorage.getItem('savedResults')) || [];
let inputMode = 'single';

/* –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ–∂ —Ä–µ–∂–∏–º–∞–º–∏ –≤–≤–æ–¥—É */
function toggleInputMode() {
    const singleInputSection = document.getElementById('single-input');
    const bulkInputSection = document.getElementById('bulk-input');
    const toggleButton = document.querySelector('.toggle-btn');

    if (inputMode === 'single') {
        singleInputSection.style.display = 'none';
        bulkInputSection.style.display = 'flex';
        inputMode = 'bulk';
        toggleButton.textContent = '–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –Ω–∞ —Ä—è–¥–∫–æ–≤–∏–π –≤–≤—ñ–¥';
    } else {
        singleInputSection.style.display = 'flex';
        bulkInputSection.style.display = 'none';
        inputMode = 'single';
        toggleButton.textContent = '–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –Ω–∞ –º–∞—Å–æ–≤–∏–π –≤–≤—ñ–¥';
    }
}

/* –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤ */
function addEntry() {
    const startTime = document.getElementById('start-time').value;
    const endTime = document.getElementById('end-time').value;
    processEntry(startTime, endTime);
}

function addBulkEntries() {
    const bulkText = document.getElementById('bulk-text').value;
    const lines = bulkText.split('\n');
    lines.forEach(line => {
        const times = line.split('-').map(time => time.trim());
        if (times.length === 2) {
            processEntry(times[0], times[1]);
        }
    });
    document.getElementById('bulk-text').value = ''; // –æ—á–∏—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
}

function processEntry(startTime, endTime) {
    if (startTime && endTime && validateTimes(startTime, endTime)) {
        entries.push({ startTime, endTime });
        displayEntries();
        document.getElementById('start-time').value = '';
        document.getElementById('end-time').value = '';
    } else {
        alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ —á–∞—Å–∏ –ø–æ—á–∞—Ç–∫—É —Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è.");
    }
}

function validateTimes(startTime, endTime) {
    const start = startTime.split(':').map(Number);
    const end = endTime.split(':').map(Number);
    return start.length === 2 && end.length === 2;
}

function displayEntries() {
    const list = document.getElementById('entries-list');
    list.innerHTML = '';
    entries.forEach((entry, index) => {
        const duration = calculateDuration(entry.startTime, entry.endTime);
        list.innerHTML += `
        <div class="entry" id="entry-${index}">
            <div>–†—è–¥–æ–∫ ${index + 1}: ${entry.startTime} - ${entry.endTime}</div>
            <div>
                <span>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${duration.hours} –≥–æ–¥–∏–Ω ${duration.minutes} —Ö–≤–∏–ª–∏–Ω</span>
            </div>
        </div>`;
    });
}

function calculateDuration(startTime, endTime) {
    const [startHour, startMinute] = startTime.split(':').map(Number);
    const [endHour, endMinute] = endTime.split(':').map(Number);
    let startMinutes = startHour * 60 + startMinute;
    let endMinutes = endHour * 60 + endMinute;
    let durationMinutes;

    if (startMinutes <= endMinutes) {
        durationMinutes = endMinutes - startMinutes;
    } else {
        durationMinutes = (1440 - startMinutes) + endMinutes;
    }

    const hours = Math.floor(durationMinutes / 60);
    const minutes = durationMinutes % 60;
    return { hours, minutes };
}

function saveResult() {
    const resultName = prompt("–ù–∞–∑–≤—ñ—Ç—å —Ü–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:");
    if (resultName && entries.length > 0) {
        const totalTime = document.getElementById('total-time').innerText;
        const newResult = {
            name: resultName,
            entries: [...entries],
            totalTime: totalTime
        };
        savedResults.push(newResult);
        localStorage.setItem('savedResults', JSON.stringify(savedResults));
        loadSavedResults();
        entries = [];
        document.getElementById('entries-list').innerHTML = '';
        document.getElementById('total-time').innerText = '';
    } else {
        alert("–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —î –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.");
    }
}

function loadSavedResults() {
    const savedList = document.getElementById('saved-list');
    savedList.innerHTML = '';
    savedResults.forEach((result, index) => {
        const li = document.createElement('li');
        li.innerHTML = `
            <span>${result.name}</span>
            <div>
                <img src="edit-icon.svg" class="icon" onclick="renameResult(${index})" alt="–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏">
                <img src="delete-icon.svg" class="icon" onclick="deleteResult(${index})" alt="–í–∏–¥–∞–ª–∏—Ç–∏">
            </div>
        `;
        li.onclick = () => openModal(index);
        savedList.appendChild(li);
    });
}

function renameResult(index) {
    const newName = prompt("–ù–æ–≤–µ —ñ–º'—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:", savedResults[index].name);
    if (newName) {
        savedResults[index].name = newName;
        localStorage.setItem('savedResults', JSON.stringify(savedResults));
        loadSavedResults();
    }
}

function deleteResult(index) {
    savedResults.splice(index, 1);
    localStorage.setItem('savedResults', JSON.stringify(savedResults));
    loadSavedResults();
}

/* –ï–∫—Å–ø–æ—Ä—Ç –≤ Excel */
function exportToExcel() {
    const worksheet = XLSX.utils.json_to_sheet(savedResults);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "–ó–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏");
    const wscols = [
        {wch: 30}, // –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ "–ù–∞–∑–≤–∞"
        {wch: 40}, // –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏ "totalTime"
    ];
    worksheet['!cols'] = wscols; // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —à–∏—Ä–∏–Ω–∏ –∫–æ–ª–æ–Ω–æ–∫
    XLSX.writeFile(workbook, "–∑–±–µ—Ä–µ–∂–µ–Ω—ñ_—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.xlsx");
}

/* –Ü–º–ø–æ—Ä—Ç –∑ Excel */
function importFromExcel(event) {
    const input = event.target;
    const reader = new FileReader();
    reader.onload = function (e) {
        const data = new Uint8Array(e.target.result);
        const workbook = XLSX.read(data, { type: 'array' });
        const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
        const importedResults = XLSX.utils.sheet_to_json(firstSheet);
        savedResults = importedResults;
        localStorage.setItem('savedResults', JSON.stringify(savedResults));
        loadSavedResults();
    };
    reader.readAsArrayBuffer(input.files[0]);
}

function openModal(index) {
    const result = savedResults[index];
    const modalContent = document.getElementById('modal-content-details');
    modalContent.innerHTML = `
        <h3>${result.name}</h3>
        ${result.entries.map((entry, idx) => `
            <div>–†—è–¥–æ–∫ ${idx + 1}: ${entry.startTime} - ${entry.endTime}</div>
        `).join('')}
        <div class="total-time">${result.totalTime}</div>
    `;
    document.getElementById('modal').style.display = 'block';
    document.getElementById('overlay').style.display = 'block';
}

function closeModal() {
    document.getElementById('modal').style.display = 'none';
    document.getElementById('overlay').style.display = 'none';
}

/* –ü–µ—Ä–µ–º–∏–∫–∞—á —Ç–µ–º–∏ */
function toggleTheme() {
    document.body.classList.toggle('dark-theme');
    const themeIcon = document.getElementById('theme-switcher');
    themeIcon.textContent = document.body.classList.contains('dark-theme') ? 'üåô' : 'üåû';
}

/* –í—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ—ó —Ç–µ–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ */
function detectSystemTheme() {
    const prefersDarkScheme = window.matchMedia('(prefers-color-scheme: dark)').matches;
    if (prefersDarkScheme) {
        document.body.classList.add('dark-theme');
        document.getElementById('theme-switcher').textContent = 'üåô';
    } else {
        document.body.classList.remove('dark-theme');
        document.getElementById('theme-switcher').textContent = 'üåû';
    }
}

window.onload = () => {
    loadSavedResults();
    detectSystemTheme();
};
